{"data":{"program":{"category":{"name":"Développement"},"costsInter":[{"cost":1.5e3}],"description":"Objectif de formation : Apporter les connaissances nécessaires pour consolider des notions de bases du langage C++","durationInHours":14.0,"goals":[{"text":"Améliorer les connaissances sur la syntaxe basique de C++"},{"text":"Implémenter l'héritage & le polymorphisme"},{"text":"Concevoir des pointeurs intelligents"},{"text":"Administrer les exceptions dans C++"},{"text":"Comprendre et bâtir des templates en C++"},{"text":"Décrire et implémenter la bibliothèque STL"}],"id":"1129885","image":{"url":"https://cdn.filestackcontent.com/IhSbA98aTyinfUExxTey"},"name":"C++ - Avancé","steps":[{"substeps":[{"text":"Conception de tableaux"},{"text":"Anatomie d'une classe"},{"text":"Spécificateurs d'accès private et public"},{"text":"Conception d'objets"},{"text":"Constructeurs, méthodes d'instance, méthodes static"},{"text":"Surcharge de fonctions & de méthodes"},{"text":"Configuration par défaut"},{"text":"Passage d'arguments aux fonctions et aux méthodes: par valeur, par adresse, par référence"},{"text":"Constructeur de copie"},{"text":"Surcharge de l'opérateur d'affectation"},{"text":"Destructeur"},{"text":"Méthodes const"},{"text":"Membres static"},{"text":"Travaux Pratiques : conception de quelques classes avec constructeurs et méthodes surchargés puis manipulation d'instances de ces classes"}],"text":"Rappels sur la syntaxe de base"},{"substeps":[{"text":"Usage du mot-clé protected"},{"text":"Distinction surcharge/redéfinition"},{"text":"Manipulation d'instances de sous-classes"},{"text":"Spécificateur protected"},{"text":"Tour d'horizon des types d'héritage"},{"text":"Utilisation des classes abstraites"},{"text":"Déclaration de méthodes virtuelles & virtuelles pures"},{"text":"Développement du code avec polymorphisme, redéfinition des méthodes"},{"text":"Implémentation de l'héritage multiple"},{"text":"Travaux Pratiques : parcours d'une hiérarchie d'objets sans, puis avec polymorphisme"}],"text":"Implémentation de l'héritage et du polymorphisme"},{"substeps":[{"text":"Risques des pointeurs nus"},{"text":"Concepts de la gestion de ressources"},{"text":"Rôles des smart pointers"},{"text":"Causes de l'obsolescence de auto_ptr"},{"text":"Implémentation de unique_ptr & shared_ptr"},{"text":"Travaux Pratiques : Mise en place de smart pointeurs"}],"text":"Smart pointers C++11"},{"substeps":[{"text":"Description des forces de la gestion d'exceptions"},{"text":"Création d'un bloc try-catch & détermination de la modification du déroulement normalement du programme"},{"text":"Démarrage d'une exception"},{"text":"Propagation d'une exception"},{"text":"Concevoir ses propres classes d'exception"},{"text":"Travaux Pratiques : Implémentation d'une gestion d'exception dans une application"}],"text":"Administration des exceptions"},{"substeps":[{"text":"Principe des templates"},{"text":"Forces & faiblesses"},{"text":"Syntaxe des templates de fonctions"},{"text":"Syntaxe des templates de classes"},{"text":"Instanciation des templates de fonctions"},{"text":"Instanciation des templates de classes"},{"text":"Travaux Pratiques : Conception d'un template de fonction puis conception d'un template de classe"}],"text":"Templates en C++"},{"substeps":[{"text":"Introduction à la Standard Template Library"},{"text":"Conteneurs"},{"text":"Itérateurs"},{"text":"Algorithmes"},{"text":"Entrées-sorties"},{"text":"Travaux Pratiques : implémentation de plusieurs conteneurs, algorithmes et templates d'entrées-sorties"}],"text":"Bibliothèque STL"}]}}}