{"data":{"program":{"category":{"name":"Développement"},"costsInter":[{"cost":1850.0}],"description":"Objectif de formation : Comprendre et maîtriser l'utilisation des design patterns de C#","durationInHours":21.0,"goals":[{"text":"Procurer un bagage formel pour faciliter la recherche de solutions stéréotypiques "},{"text":"Pouvoir enrichir son catalogue de Design Patterns techniques et métiers"}],"id":"1138454","image":{"url":"https://cdn.filestackcontent.com/gg5hIYR3QOWINcETk8qa"},"name":"C# - Design Pattern","steps":[{"substeps":[{"text":"Classe"},{"text":"Instance"},{"text":"Encapsulation"},{"text":"Polymorphisme"},{"text":"Interface"},{"text":"Héritage"},{"text":"Agrégation"},{"text":"Autres concepts objets"}],"text":"Rappel sur les concepts objet"},{"substeps":[{"text":"Modèle statique et dynamique"},{"text":"Cas d’usage"},{"text":"De l’analyse à la conception"},{"text":"Qualités visées d’un modèle objet"}],"text":"Introduction à UML"},{"substeps":[{"text":"Dans la phase analytique"},{"text":"En conception"},{"text":"En rétro-ingénierie"},{"text":"Refactoring : best practices & critères d’évaluation du modèle objet"}],"text":"Rôle et application des Design Patterns"},{"substeps":[{"text":"Modélisation"},{"text":"Intégration dans un diagramme de classes"}],"text":"Design Patterns & UML"},{"substeps":[{"text":"Classification : créationnel, structurel, comportemental"},{"text":"Application : création, dépendance, fonctionnalité, granularité, évolution"}],"text":"Organisation du catalogue"},{"substeps":[{"text":"(gof) fabrique abstraite"},{"text":"Adaptateur"},{"text":"Pond"},{"text":"Constructeur"},{"text":"Chaîne de responsabilité"},{"text":"Commande"},{"text":"Composite"},{"text":"Décorateur"},{"text":"Façade"},{"text":"Méthode de fabrique"},{"text":"Poids mouche"},{"text":"Interpréteur"},{"text":"Itérateur"},{"text":"Médiateur"},{"text":"Memento"},{"text":"Observateur"},{"text":"Prototype"},{"text":"Proximité"},{"text":"Singleton"},{"text":"État"},{"text":"Stratégie"},{"text":"Modèle de méthode"},{"text":"Visiteur"},{"text":"Design patterns d’architecture applicative : DAO, dispenseur, dispatcher, helper class"}],"text":"Design Patterns"},{"substeps":[{"text":"Contraintes de réalisation"},{"text":"Implémentation et ajustement selon les langages"}],"text":"Ajustement les Design Patterns aux besoins applicatifs"},{"substeps":[{"text":"Design Patterns de ressources limitées"},{"text":"Compteur de référence"}],"text":"Création de nouveaux Design Patterns"},{"substeps":[{"text":"Mise en œuvre dans les solutions applicatives"}],"text":"Design Patterns au Framework"},{"substeps":[{"text":"Modélisation du besoin"},{"text":"Identification des patterns"},{"text":"Affinage et sélection"},{"text":"Ajustement"},{"text":"Modélisation de la solution retenue"}],"text":"Étude de cas"}]}}}